

ASSIGNMENT_JS_14/7/2020

QUESTION 1 :
SOLUTION:

IN JS , CONSOLE IS AN OBJECT WHICH PROVIDES ACCESS TO WEB BROWSER’S DEBUGGING CONSOLE.
THIS CONSOLE OBJECT PROVIDES US WITH SEVERAL DIFFERENT METHODS LIKE 
1. LOG()
2. WARN()
3. ERROR()
4. CLEAR()
5. TIME() AND timeEND()
6. TABLE()
7. COUNT()
8. GROUP() AND groupEnd()
9. Custom console logs


1 ) Log() -:
	This method is actually used to print output to the console.
We can put any type inside this method like array ,boolean, string ,object.
EG-: console.log('abc');  
     console.log(1); 
     console.log(true); 
     console.log(null); 

2 ) Warn() -:
	This method is used to give warning message to the console.
By default it is highlighted to yellow.
EG-:console.warn('This is a warning.');  

3 )Error() -:
This method is used to log error message to console and is usually useful while testing.
Default colour for this error message is red.
EG-:console.error('This is a simple error');

4)Clear()-:
This is used to clear the console, and if using chrome then whenever the console is cleared it prints a text that console is cleared.
EG-: console.clear();

5)Time() and TimeEnd-:
	Time and TimeEnd methods will be used whenever we want to know the amount of time spent by a block or a function.
They take a label as a parameter which must be same and code inside it can be anything ( function , object , simple console.)
EG-: console.time('abc'); 
 let fun =  function(){ 
     console.log('fun is running'); 
 } 
 fun();
 console.TimeEnd('abc');

6)Table()-:
This method actually allows us to generate a table inside a console.
The input must be an array or an object which will be shown as table.
EG-:
console.table({'a':1, 'b':2});

7)Count()-:
This method is used for counting the number that the function hit by its counting method.
EG-: for(let i=0;i<5;i++){ 
    console.count(i); 
} 

8)Group() and GroupEnd()-:
This methods are used for grouping contents in a separate block .
EG-: console.group('simple'); 
     console.error('error here'); 
    console.log('blue vin pink'); 
    console.groupEnd('simple'); 

9)Custom console logs-:
This method lets the user to add styling to the console.
The syntax to add css styling as a parameter to the logs which will replace the format specifier %c.
EG-:
  const spacing = '40px'; 
  const styles =  
        `padding: ${spacing}; background-color: white; color: pink; font-style:  
         bold; border: 1px solid black; font-size: 2em;`; 
  console.log('%cGeeks for Geeks', styles); 

QUESTION 2 :
SOLUTION:

There are three ways of defining a variable var , const , and let.
But the difference is that 

1)Var has a function-scope whereas let/const have a block-scope , that is not accessible outside the braces .

Eg-:

function myFn() {
 
  if (true) {
  	var foo = 'peekaboo!';
 	let bar = 'i see u';
  	const baz = 'baby blue!';

  console.log(foo); // 'peekaboo!';
  console.log(bar); // 'i see u';
  console.log(baz); // ' blue!';
}

console.log(foo); // 'peekaboo!';
console.log(bar); // ReferenceError: bar is not defined
console.log(baz); 
console.log(foo); // 'peekaboo!'
}

console.log(foo); // ReferenceError: foo is not defined

Here the var foo is accessible only inside a function hence it has function-scope.

Whereas let/const has its scope only limited to if block that is not accessible outside the if block hence they have a block scope.


2)Using var and let we can reassign the variables but that is not possible with const.  And difference between var and let is that reassigning with let’s syntax is more strict we can’t redefine the datatype .
	Eg-:

function myFn() {
 	var fun =1; 
	let foo = 1;
 	 foo = 30;
  	var fun=101;  // can use “var” keyword again.
	// let foo = 101;    // can't use "let" keyword again
  	foo = 101;

  console.log(foo);  
}

myFn();
console.log(foo);  


QUESTION 3 :
SOLUTION:

Data types basically specify what kind of data can be stored and manipulated within a program.
There are six basic data types in JavaScript which can be divided into three main categories: 
1)primitive (or primary), 
2)composite (or reference), and special data types. String, Number, and Boolean are primitive data types. 
3)Object, Array, and Function (which are all types of objects) are composite data types. Whereas Undefined and Null are special data types.
Primitive data types can hold only one value at a time, whereas composite data types can hold collections of values and more complex entities.

1. String datatype- : The string data type is used to represent textual data.Eg-: var a = 'Hi there!';
2. Number datatype -: The number data type is used to represent positive or negative numbers with or without decimal.Eg-: var a = 25;         // integer
				    var b = 80.5;       //floating point

3. Boolean datatype-: The Boolean data type can hold only two values: true or false.
4. Undefined datatype-: The undefined data type can only have one value-the special value undefined. If a variable has been declared, but has not been assigned a value, has the value undefined. Eg-: var a;
							    var b = "Hello World!"
							    alert(a) // Output: undefined
							    alert(b) // Output: Hello World!
5. Null datatype-:This is another special data type that can have only one value-the null value. A null value means that there is no value.
6. Object datatype-:The object is a complex data type that allows you to store collections of data.
